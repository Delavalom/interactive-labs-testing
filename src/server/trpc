import { initTRPC, inferAsyncReturnType } from "@trpc/server";
import { database } from "./db";
import { z } from 'zod'

const createContext = async () => {
  return {
    database,
  };
};

type Context = inferAsyncReturnType<typeof createContext>;

const t = initTRPC.context<Context>().create();

const router = t.router
const middleware = t.middleware
const procedure = t.procedure


const appRouter = router({
    getUsers: procedure.query(({ctx}) => {
        return ctx.database
    }),
    getUser: procedure.input(z.object({
        id: z.number()
    })).query(({ctx, input}) => {
        const user = ctx.database.filter(record => record.id === input.id)
        return user
    })
})


export type AppRouter = typeof appRouter